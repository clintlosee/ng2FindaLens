"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var lens_admin_service_1 = require('./lens-admin.service');
var LensAdminComponent = (function () {
    function LensAdminComponent(_lensAdminService) {
        this._lensAdminService = _lensAdminService;
        this.processing = true;
    }
    LensAdminComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._lensAdminService.getMessages()
            .subscribe(function (lenses) {
            _this.lensData = lenses;
            _this.processing = false;
        }, function (error) { return console.log(error); });
    };
    LensAdminComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'lens-admin',
            templateUrl: 'lens-admin.component.html'
        }), 
        __metadata('design:paramtypes', [lens_admin_service_1.LensAdminService])
    ], LensAdminComponent);
    return LensAdminComponent;
}());
exports.LensAdminComponent = LensAdminComponent;

//# sourceMappingURL=data:application/json;base64,
